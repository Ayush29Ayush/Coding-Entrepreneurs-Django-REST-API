1. Create a virtual env using "python -m venv venv" 
2. pip freeze > requirements.txt
3. django-admin startproject cfehome .
4. Run the server from backend dir and copy the endpoint to py_client/basics.py 
5. python manage.py startapp api, then add that app in the project settings
6. Created urls and views for the api app and included those url to project's urls.py. Make changes in py_client/basics.py and now able to get JSON response.
7. Checking and appending contents of a request and returning them as JSON response.
8. Create a new app "products" and a new model inside it. Then "python manage.py makemigrations" and "python manage.py migrate".
9. Use "python manage.py shell" to interact and add data to the model.
>>> from products.models import Product
>>> Product.objects.create(title="Hello", content="Hello content", price=123.22)
<Product: Product object (1)>
>>> Product.objects.create(title="Hello again", content="Hello content again", price=155.22) 
<Product: Product object (2)>
10. Now write the view to access this Product models data and return the JSON response.
11. Use model_to_dict to convert data to dict and pass response as JSON.
12. Use api.view decorators to set allowed request methods with ease.
13. Serializers can be used to set rules and validation on the data received and on the flow of model's data.

Ques) Why do we need serializer?
Ans)-> Because when we do Model_name.objects.all(), it will give [1,2,3,4] which is a queryset. We cannot expose our queryset to the frontend. It should be in a JSON format, to do that we use SERIALIZER. So basically you pass data to the SERIALIZER and it converts them into JSON format.
    -> It also helps set up required fields.

Ques) Validation of data using serializer?
Ans) To maintain consistensy of data and validate whether the data coming follows the rules.

14. You can also get custom fields which are not defined as model fields using Serializers.
15. To create a function to call get_discount function and save that returned data inside variable named "my_discount", use get_variable_name. So we create a function in this serializer named get_my_discount(). 
16. Most commonly used serializer is ModelSerializer.
17. The only way to create a instance is through using serializer.save()
18. RetrieveAPIView => Used for read-only endpoints to represent a single model instance. Provides a get method handler.
19. CreateAPIView => Used for create-only endpoints. Provides a post method handler.
20. ListCreateAPIView => Used for read-write endpoints to represent a collection of model instances. Provides get and post method handlers.

21. genericAPIviews are better than @api_view decorators(functional based views) because of less lines of code and less confusion. Predefined and easy to use.

22. UpdateAPIView => Used for update-only endpoints for a single model instance. Provides put and patch method handlers.
23. DestroyAPIView => Used for delete-only endpoints for a single model instance. Provides a delete method handler.

24. In class based view, we write functions to handle request methods whereas in functional based view, we write conditions to handle request methods.
25. Mixins in the context of Python and Django are classes that provide a set of methods and behaviors that can be easily reused in other classes. They are typically used for code reusability and to add specific functionalities to a class without the need for multiple inheritance.

26. Session Authentication and Permissions can be used using "from rest_framework import authentication, permissions". Use authentication_classes = [authentication.SessionAuthentication] and permission_classes = [permissions.IsAuthenticated] in your view. Now create a super user and login, then django will automatically use the session token logic and since you have logged in, you will be authenticated.
27. Custom Permissions can also be set. Check documentation.

28. Implement Token Authentication, refer docs. Here also we are implementing token authentication.
29. Here we are not making the token expire after some time, which should be implemented. Recommended that you go will 3rd party authentication packages rather than writing everything from scratch.

30. Rather than setting permission_classes in every view, just create a mixins(similar to a function which can be imported and used) and pass it as a parameter to all the views. So whenever you have to change anyy permission, directly change it in mixins.py and it will be reflected in every view

31. Use viewsets.ModelViewSet and just give these 2 fields i.e queryset = Product.objects.all() and serializer_class = ProductSerializer. All the CRUD APIs will be created by its own by the ModelViewSet. Include the router in the urls.py